{"ast":null,"code":"import Tone from \"tone\";\nexport default class Instrument {\n  constructor(id, oscType) {\n    this.updateInstrument = props => {\n      if (this.synth) {\n        this.synth.disconnect();\n        this.synth.dispose();\n      }\n\n      this.synth = new Tone[props.oscillator.type]();\n      this.synth.envelope.attack = props.envelope.attack;\n      this.synth.envelope.decay = props.envelope.decay;\n      this.synth.envelope.sustain = props.envelope.sustain;\n      this.synth.envelope.release = props.envelope.release;\n    };\n\n    this.activateInstrument = notes => {\n      if (this.active) {\n        console.log(\"Deactivating synth \".concat(this.id));\n        this.sequence.stop();\n      } else {\n        console.log(\"Activating synth \".concat(this.id));\n        this.sequence = new Tone.Sequence((time, note) => {\n          this.synth.triggerAttackRelease(note, \"10hz\", time);\n        }, notes, \"4n\");\n        this.sequence.start();\n      }\n\n      this.active = !this.active;\n    };\n\n    this.id = id;\n    console.log(oscType);\n    this.synth = new Tone.Synth(oscType).toMaster();\n    this.sequence = null;\n    this.active = false;\n  }\n  /*\n   _updateSynthType(synthType, envelope) {\n    // If we have already defined the synth\n    if (this.synth) {\n      this.synth.disconnect(this.gain);\n      this.synth.dispose();\n    }\n    // The new Synth!\n    let settings = this.defaultSettings[synthType] || {};\n    settings.envelope = Object.assign(settings.envelope, envelope);\n    this.synth = new Tone[synthType](settings);\n    this.synth.connect(this.gain);\n  }*/\n\n\n}","map":{"version":3,"sources":["/home/fvrh/Documentos/week8/bbrss/src/Instrument.class.js"],"names":["Tone","Instrument","constructor","id","oscType","updateInstrument","props","synth","disconnect","dispose","oscillator","type","envelope","attack","decay","sustain","release","activateInstrument","notes","active","console","log","sequence","stop","Sequence","time","note","triggerAttackRelease","start","Synth","toMaster"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,eAAe,MAAMC,UAAN,CAAiB;AAC9BC,EAAAA,WAAW,CAACC,EAAD,EAAKC,OAAL,EAAc;AAAA,SAsBzBC,gBAtByB,GAsBNC,KAAK,IAAI;AAC1B,UAAG,KAAKC,KAAR,EAAe;AACb,aAAKA,KAAL,CAAWC,UAAX;AACA,aAAKD,KAAL,CAAWE,OAAX;AACD;;AACD,WAAKF,KAAL,GAAa,IAAIP,IAAI,CAACM,KAAK,CAACI,UAAN,CAAiBC,IAAlB,CAAR,EAAb;AACA,WAAKJ,KAAL,CAAWK,QAAX,CAAoBC,MAApB,GAA6BP,KAAK,CAACM,QAAN,CAAeC,MAA5C;AACA,WAAKN,KAAL,CAAWK,QAAX,CAAoBE,KAApB,GAA4BR,KAAK,CAACM,QAAN,CAAeE,KAA3C;AACA,WAAKP,KAAL,CAAWK,QAAX,CAAoBG,OAApB,GAA8BT,KAAK,CAACM,QAAN,CAAeG,OAA7C;AACA,WAAKR,KAAL,CAAWK,QAAX,CAAoBI,OAApB,GAA8BV,KAAK,CAACM,QAAN,CAAeI,OAA7C;AACD,KAhCwB;;AAAA,SAkCzBC,kBAlCyB,GAkCJC,KAAK,IAAI;AAC5B,UAAI,KAAKC,MAAT,EAAiB;AACfC,QAAAA,OAAO,CAACC,GAAR,8BAAkC,KAAKlB,EAAvC;AACA,aAAKmB,QAAL,CAAcC,IAAd;AACD,OAHD,MAGO;AACLH,QAAAA,OAAO,CAACC,GAAR,4BAAgC,KAAKlB,EAArC;AACA,aAAKmB,QAAL,GAAgB,IAAItB,IAAI,CAACwB,QAAT,CACd,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACd,eAAKnB,KAAL,CAAWoB,oBAAX,CAAgCD,IAAhC,EAAsC,MAAtC,EAA8CD,IAA9C;AACD,SAHa,EAIdP,KAJc,EAKd,IALc,CAAhB;AAOA,aAAKI,QAAL,CAAcM,KAAd;AACD;;AACD,WAAKT,MAAL,GAAc,CAAC,KAAKA,MAApB;AACD,KAlDwB;;AACvB,SAAKhB,EAAL,GAAUA,EAAV;AACAiB,IAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACA,SAAKG,KAAL,GAAa,IAAIP,IAAI,CAAC6B,KAAT,CAAezB,OAAf,EAAwB0B,QAAxB,EAAb;AACA,SAAKR,QAAL,GAAgB,IAAhB;AACA,SAAKH,MAAL,GAAc,KAAd;AACD;AAED;;;;;;;;;;;;;;;AAT8B","sourcesContent":["import Tone from \"tone\";\n\nexport default class Instrument {\n  constructor(id, oscType) {\n    this.id = id;\n    console.log(oscType)\n    this.synth = new Tone.Synth(oscType).toMaster();\n    this.sequence = null;\n    this.active = false;\n  }\n\n  /*\n   _updateSynthType(synthType, envelope) {\n    // If we have already defined the synth\n    if (this.synth) {\n      this.synth.disconnect(this.gain);\n      this.synth.dispose();\n    }\n    // The new Synth!\n    let settings = this.defaultSettings[synthType] || {};\n    settings.envelope = Object.assign(settings.envelope, envelope);\n    this.synth = new Tone[synthType](settings);\n    this.synth.connect(this.gain);\n  }*/\n\n  updateInstrument = props => {\n    if(this.synth) {\n      this.synth.disconnect();\n      this.synth.dispose();\n    }\n    this.synth = new Tone[props.oscillator.type]();\n    this.synth.envelope.attack = props.envelope.attack;\n    this.synth.envelope.decay = props.envelope.decay;\n    this.synth.envelope.sustain = props.envelope.sustain;\n    this.synth.envelope.release = props.envelope.release;\n  };\n\n  activateInstrument = notes => {\n    if (this.active) {\n      console.log(`Deactivating synth ${this.id}`);\n      this.sequence.stop();\n    } else {\n      console.log(`Activating synth ${this.id}`);\n      this.sequence = new Tone.Sequence(\n        (time, note) => {\n          this.synth.triggerAttackRelease(note, \"10hz\", time);\n        },\n        notes,\n        \"4n\"\n      );\n      this.sequence.start();\n    }\n    this.active = !this.active;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}