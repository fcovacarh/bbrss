{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEG_360_IN_RAD = radians(360);\nexports.ANGLE_OFFSET = Math.PI;\n\nfunction polarToCartesian(_a) {\n  var center = _a.center,\n      angle = _a.angle,\n      radius = _a.radius;\n  return {\n    x: center.x + Math.sin(angle) * radius,\n    y: center.y + Math.cos(angle) * radius\n  };\n}\n\nexports.polarToCartesian = polarToCartesian;\n\nfunction radians(deg) {\n  return deg * Math.PI / 180;\n}\n\nexports.radians = radians;\n\nfunction degrees(rad) {\n  return rad * 180 / Math.PI;\n}\n\nexports.degrees = degrees;\n\nfunction matrixScale(scale, x, y) {\n  return \"matrix(\" + scale + \", 0, 0, \" + scale + \", \" + (x - scale * x) + \", \" + (y - scale * y) + \")\";\n}\n\nexports.matrixScale = matrixScale;\n\nfunction clamp(min, max, value) {\n  return Math.min(Math.max(value, min), max);\n}\n\nexports.clamp = clamp;\n\nfunction calculateNearestValueToPoint(_a) {\n  var _b = _a.center,\n      centerX = _b.x,\n      centerY = _b.y,\n      _c = _a.container,\n      containerX = _c.x,\n      containerY = _c.y,\n      _d = _a.point,\n      pointX = _d.x,\n      pointY = _d.y,\n      radius = _a.radius,\n      value = _a.value;\n  var radialPosition = {\n    x: pointX - containerX - centerX,\n    y: -(pointY - containerY - centerY)\n  };\n  var valuePosition = polarToCartesian({\n    center: {\n      x: 0,\n      y: 0\n    },\n    angle: valueToAngle(value),\n    radius: radius\n  });\n  var deltaTheta = calcAngleDiff(radialPosition.x, radialPosition.y, valuePosition.x, -valuePosition.y);\n  var deltaValue = value + deltaTheta / 360;\n  var nearestValue = deltaValue > 1 ? deltaValue - 1 : deltaValue;\n  return nearestValue;\n}\n\nexports.calculateNearestValueToPoint = calculateNearestValueToPoint;\n\nfunction calcAngleDiff(x1, y1, x2, y2) {\n  var arcTangent = Math.atan2(x1 * y2 - y1 * x2, x1 * x2 + y1 * y2);\n\n  if (arcTangent < 0) {\n    arcTangent += 2 * Math.PI;\n  }\n\n  return arcTangent * 180 / Math.PI;\n}\n\nexports.calcAngleDiff = calcAngleDiff;\n\nfunction valueToAngle(value) {\n  return -value * exports.DEG_360_IN_RAD + exports.ANGLE_OFFSET;\n}\n\nexports.valueToAngle = valueToAngle;\n\nfunction absPos(e) {\n  var touchEvent = e.touches && e;\n\n  if (touchEvent) {\n    return {\n      x: touchEvent.touches[0].pageX - (window.scrollX || window.pageXOffset),\n      y: touchEvent.touches[0].pageY - (window.scrollY || window.pageYOffset)\n    };\n  }\n\n  var mouseEvent = e.pageX && e;\n\n  if (mouseEvent) {\n    return {\n      x: mouseEvent.pageX - (window.scrollX || window.pageXOffset),\n      y: mouseEvent.pageY - (window.scrollY || window.pageYOffset)\n    };\n  }\n\n  throw new Error('Unknown event type received (expected: MouseEvent | TouchEvent)');\n}\n\nexports.absPos = absPos;\n\nfunction stopEvent(e) {\n  e.stopPropagation();\n  e.preventDefault();\n}\n\nexports.stopEvent = stopEvent;\n\nfunction getElementPosition(el) {\n  if (!el) return;\n\n  var _a = el.getBoundingClientRect(),\n      x = _a.left,\n      y = _a.top;\n\n  return {\n    x: x,\n    y: y\n  };\n}\n\nexports.getElementPosition = getElementPosition;","map":null,"metadata":{},"sourceType":"script"}