{"ast":null,"code":"import Tone from 'tone';\n\nclass Song {\n  constructor() {\n    this.addSynth = () => {\n      this.instruments.push(new Tone.Synth().toMaster());\n      return this.getSynths();\n    };\n\n    this.getSynths = () => {\n      return this.instruments;\n    };\n\n    this.getSynth = idx => {\n      return this.instruments[idx];\n    };\n\n    this.updateSynth = (idx, props) => {\n      console.log(props);\n      const synthSettings = {\n        oscillator: new Tone.Oscillator(props.oscillator),\n        envelope: new Tone.AmplitudeEnvelope(props.envelope)\n      };\n      this.instruments[idx] = new Tone.Synth(synthSettings);\n    };\n\n    this.tempo = 120;\n    this.instruments = [];\n  }\n\n}\n\nexport default Song;","map":{"version":3,"sources":["/home/fvrh/Documentos/week8/bbrss/src/Song.js"],"names":["Tone","Song","constructor","addSynth","instruments","push","Synth","toMaster","getSynths","getSynth","idx","updateSynth","props","console","log","synthSettings","oscillator","Oscillator","envelope","AmplitudeEnvelope","tempo"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AAAA,SAKdC,QALc,GAKH,MAAM;AACb,WAAKC,WAAL,CAAiBC,IAAjB,CAAsB,IAAIL,IAAI,CAACM,KAAT,GAAiBC,QAAjB,EAAtB;AACA,aAAO,KAAKC,SAAL,EAAP;AACH,KARa;;AAAA,SAUdA,SAVc,GAUF,MAAM;AACd,aAAO,KAAKJ,WAAZ;AACH,KAZa;;AAAA,SAcdK,QAdc,GAcFC,GAAD,IAAS;AAChB,aAAO,KAAKN,WAAL,CAAiBM,GAAjB,CAAP;AACH,KAhBa;;AAAA,SAkBdC,WAlBc,GAkBA,CAACD,GAAD,EAAME,KAAN,KAAgB;AAC1BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,YAAMG,aAAa,GAAG;AAClBC,QAAAA,UAAU,EAAE,IAAIhB,IAAI,CAACiB,UAAT,CAAoBL,KAAK,CAACI,UAA1B,CADM;AAElBE,QAAAA,QAAQ,EAAE,IAAIlB,IAAI,CAACmB,iBAAT,CAA2BP,KAAK,CAACM,QAAjC;AAFQ,OAAtB;AAIA,WAAKd,WAAL,CAAiBM,GAAjB,IAAwB,IAAIV,IAAI,CAACM,KAAT,CAAeS,aAAf,CAAxB;AACH,KAzBa;;AACV,SAAKK,KAAL,GAAa,GAAb;AACA,SAAKhB,WAAL,GAAmB,EAAnB;AACH;;AAJM;;AA6BX,eAAeH,IAAf","sourcesContent":["import Tone from 'tone';\n\nclass Song {\n    constructor() {\n        this.tempo = 120;\n        this.instruments = [];\n    }\n\n    addSynth = () => {\n        this.instruments.push(new Tone.Synth().toMaster());\n        return this.getSynths();\n    }\n\n    getSynths = () => {\n        return this.instruments;\n    }\n\n    getSynth = (idx) => {\n        return this.instruments[idx];\n    }\n\n    updateSynth = (idx, props) => {\n        console.log(props);\n        const synthSettings = {\n            oscillator: new Tone.Oscillator(props.oscillator),\n            envelope: new Tone.AmplitudeEnvelope(props.envelope)\n        }\n        this.instruments[idx] = new Tone.Synth(synthSettings);\n    }\n}\n\nexport default Song;"]},"metadata":{},"sourceType":"module"}